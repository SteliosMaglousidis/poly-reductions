theory Continuation
  imports IMP_GRec "HOL-Library.Tree"
begin

unbundle no com_syntax and com'_syntax
unbundle rcom_syntax

inductive
  rlast_call :: "rcom \<Rightarrow> rcom \<times> state \<Rightarrow> nat \<Rightarrow> state \<times> vname option \<Rightarrow> bool" ("_ \<turnstile>\<^sub>L\<^sub>C _ \<Rightarrow>\<^bsup>_\<^esup>  _" 55)
where
rSkip: "c \<turnstile>\<^sub>L\<^sub>C (rSKIP,s) \<Rightarrow>\<^bsup>Suc (0::nat) \<^esup> (s,None)" |
rAssign: "c \<turnstile>\<^sub>L\<^sub>C (x ::= a,s) \<Rightarrow>\<^bsup>Suc (Suc 0) \<^esup> (s(x := aval a s),None)" |
rSeq: "\<lbrakk>c \<turnstile>\<^sub>L\<^sub>C (c1,s1) \<Rightarrow>\<^bsup>x \<^esup> (s2,r1) ; c \<turnstile>\<^sub>L\<^sub>C (c2,s2) \<Rightarrow>\<^bsup>y \<^esup> (s3,r2) ; z=x+y \<rbrakk> \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C (c1;;c2, s1) \<Rightarrow>\<^bsup>z \<^esup> (s3,r2)" |
rIfTrue: "\<lbrakk> s b \<noteq> 0;  c \<turnstile>\<^sub>L\<^sub>C (c1,s) \<Rightarrow>\<^bsup>x \<^esup> (t,r); y=x+1 \<rbrakk> \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C (IF b \<noteq>0 THEN c1 ELSE c2, s) \<Rightarrow>\<^bsup>y \<^esup> (t,r)" |
rIfFalse: "\<lbrakk> s b = 0; c \<turnstile>\<^sub>L\<^sub>C (c2,s) \<Rightarrow>\<^bsup>x \<^esup> (t,r); y=x+1  \<rbrakk> \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C (IF b \<noteq>0 THEN c1 ELSE c2, s) \<Rightarrow>\<^bsup>y \<^esup> (t,r)" |
rCall: "(C,s) \<Rightarrow>\<^bsup>z \<^esup> t \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C (CALL C RETURN r,s) \<Rightarrow>\<^bsup>z \<^esup> (s(r:=t r), Some r)" |
\<comment> \<open>New rule\<close>
rRec: "c \<turnstile>\<^sub>L\<^sub>C (c,s) \<Rightarrow>\<^bsup>z \<^esup> (t,r) \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C (RECURSE,s) \<Rightarrow>\<^bsup>5 + z \<^esup> (t,r)"

code_pred rlast_call .

declare rlast_call.intros[intro]

lemmas rlast_call_induct = rlast_call.induct[split_format(complete)]

inductive_cases rlcSkip_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C (rSKIP,s) \<Rightarrow>\<^bsup>x \<^esup> t"
inductive_cases rlcAssign_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C (x ::= a,s) \<Rightarrow>\<^bsup>p \<^esup> t"
inductive_cases rlcSeq_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C (c1;;c2,s1) \<Rightarrow>\<^bsup>p \<^esup> s3"
inductive_cases rlcIf_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C (IF b \<noteq>0 THEN c1 ELSE c2,s) \<Rightarrow>\<^bsup>x \<^esup> t"
inductive_cases rlcCall_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C (CALL C RETURN r,s) \<Rightarrow>\<^bsup>z \<^esup> t"

inductive_cases rlcRec_tE[elim]: "c \<turnstile>\<^sub>L\<^sub>C (RECURSE,s) \<Rightarrow>\<^bsup>x \<^esup> t"

fun call_count :: "rcom \<Rightarrow> nat" where
"call_count ((IF b\<noteq>0 THEN c1 ELSE c2)) = call_count c1 + call_count c2" |
"call_count (c1 ;; c2) =  call_count c1 + call_count c2" |
"call_count (CALL C RETURN r') = 1" |
"call_count _ = 0"

fun call_vars :: "rcom \<Rightarrow> vname list" where
"call_vars ((IF b\<noteq>0 THEN c1 ELSE c2)) = call_vars c1 @ call_vars c2" |
"call_vars (c1 ;; c2) =  call_vars c1 @ call_vars c2" |
"call_vars (CALL C RETURN r) = [r]" |
"call_vars _ = []"

fun call_vars_set :: "rcom \<Rightarrow> vname set" where
"call_vars_set ((IF b\<noteq>0 THEN c1 ELSE c2)) = call_vars_set c1 \<union> call_vars_set c2" |
"call_vars_set (c1 ;; c2) =  call_vars_set c1 \<union> call_vars_set c2" |
"call_vars_set (CALL C RETURN r) = {r}" |
"call_vars_set _ = {}"

lemma call_vars_set: "call_vars_set c = set (call_vars c)"
  by (induction c) auto

lemma call_vars_count: "length (call_vars c) \<le> call_count c"
  by (induction c) auto

lemma last_call_vars: "d \<turnstile>\<^sub>L\<^sub>C (c,s) \<Rightarrow>\<^bsup>z\<^esup> (t,r) \<Longrightarrow> the r \<in> set (call_vars c) \<union> set (call_vars d) \<or> r = None"
  by (induction d c s z t r rule: rlast_call_induct) auto

lemma last_call_sound: "d \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t  
  \<Longrightarrow> \<exists> r. d \<turnstile>\<^sub>L\<^sub>C (c,s) \<Rightarrow>\<^bsup>z \<^esup> (t,r)"
  by (induction d c s z t rule: rbig_step_t_induct) fastforce+

lemma last_call_complete: "d \<turnstile>\<^sub>L\<^sub>C (c,s) \<Rightarrow>\<^bsup>z \<^esup> (t,r)
  \<Longrightarrow> d \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t"
  by (induction d c s z t r rule: rlast_call_induct) fastforce+

inductive
  rlast_call_val :: "rcom \<Rightarrow> rcom \<times> state \<Rightarrow> nat \<Rightarrow> state \<times> val option \<Rightarrow> bool" ("_ \<turnstile>\<^sub>L\<^sub>C\<^sub>V _ \<Rightarrow>\<^bsup>_\<^esup>  _" 55)
where
rlcvSkip: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (rSKIP,s) \<Rightarrow>\<^bsup>Suc (0::nat) \<^esup> (s,None)" |
rlcvAssign: "c\<turnstile>\<^sub>L\<^sub>C\<^sub>V (x ::= a,s) \<Rightarrow>\<^bsup>Suc (Suc 0) \<^esup> (s(x := aval a s),None)" |
rlcvSeq1: "\<lbrakk>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1,s1) \<Rightarrow>\<^bsup>x \<^esup> (s2,v) ; c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c2,s2) \<Rightarrow>\<^bsup>y \<^esup> (s3,None) ; z=x+y \<rbrakk> \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;;c2, s1) \<Rightarrow>\<^bsup>z \<^esup> (s3,v)" |
rlcvSeq2: "\<lbrakk>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1,s1) \<Rightarrow>\<^bsup>x \<^esup> (s2,v) ; c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c2,s2) \<Rightarrow>\<^bsup>y \<^esup> (s3,Some v') ; z=x+y \<rbrakk> \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;;c2, s1) \<Rightarrow>\<^bsup>z \<^esup> (s3,Some v')" |
rlcvIfTrue: "\<lbrakk> s b \<noteq> 0;  c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1,s) \<Rightarrow>\<^bsup>x \<^esup> (t,v); y=x+1 \<rbrakk> \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (IF b \<noteq>0 THEN c1 ELSE c2, s) \<Rightarrow>\<^bsup>y \<^esup> (t,v)" |
rlcvIfFalse: "\<lbrakk> s b = 0; c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c2,s) \<Rightarrow>\<^bsup>x \<^esup> (t,v); y=x+1  \<rbrakk> \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (IF b \<noteq>0 THEN c1 ELSE c2, s) \<Rightarrow>\<^bsup>y \<^esup> (t,v)" |
rlcvCall: "(C,s) \<Rightarrow>\<^bsup>z \<^esup> t \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (CALL C RETURN r,s) \<Rightarrow>\<^bsup>z \<^esup> (s(r:=t r), Some (t r))" |
\<comment> \<open>New rule\<close>
rRec: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup>z \<^esup> (t,v) \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (RECURSE,s) \<Rightarrow>\<^bsup>5 + z \<^esup> (t,v)"

code_pred rlast_call_val .

declare rlast_call_val.intros[intro]

lemmas rlast_call_val_induct = rlast_call_val.induct[split_format(complete)]

inductive_cases rlcvSkip_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (rSKIP,s) \<Rightarrow>\<^bsup>x \<^esup> t"
inductive_cases rlcvAssign_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (x ::= a,s) \<Rightarrow>\<^bsup>p \<^esup> t"
inductive_cases rlcvSeq_tE1[elim!]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;;c2,s1) \<Rightarrow>\<^bsup>p \<^esup> (t,None)"
inductive_cases rlcvSeq_tE2[elim!]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;;c2,s1) \<Rightarrow>\<^bsup>p \<^esup> (t,Some v)"
inductive_cases rlcvSeq_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;;c2,s1) \<Rightarrow>\<^bsup>p \<^esup> t"
inductive_cases rlcvIf_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (IF b \<noteq>0 THEN c1 ELSE c2,s) \<Rightarrow>\<^bsup>x \<^esup> t"
inductive_cases rlcvCall_tE[elim!]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (CALL C RETURN r,s) \<Rightarrow>\<^bsup>z \<^esup> t"
inductive_cases rlcvRec_tE[elim]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (RECURSE,s) \<Rightarrow>\<^bsup>x \<^esup> t"


fun continuate :: "rcom \<Rightarrow> vname \<Rightarrow> rcom" where 
"continuate (rSKIP) r = rSKIP" |
"continuate (x ::= a) r= (x ::= a)" | 
"continuate (c1 ;; c2) r = continuate c1 r ;; continuate c2 r" |
"continuate (IF b\<noteq>0 THEN c1 ELSE c2)r = (IF b\<noteq>0 THEN continuate c1 r ELSE continuate c2 r)" |
"continuate (CALL C RETURN r') r = (CALL C RETURN r) ;; (r' ::= A (V r))"|
"continuate RECURSE r = RECURSE"

lemma continuate_call_vars: "call_vars_set (continuate c r) = {r} \<or> call_vars_set (continuate c r) = {}"
  apply (induction c r rule: continuate.induct) 
       apply simp+
     apply blast
  by auto

lemma continuate_no_calls': "call_count c = 0 \<Longrightarrow> continuate c r = c"
  by (induction c) auto

lemma continuate_no_calls: 
  "call_count c = 0
  \<Longrightarrow>  c' \<turnstile>\<^sub>R(c,s) \<Rightarrow>\<^bsup>z \<^esup> t \<longleftrightarrow> c' \<turnstile>\<^sub>R (continuate c r, s) \<Rightarrow>\<^bsup> z\<^esup> t"
  using continuate_no_calls' by (induction c) auto

lemma lcv_seq_None[simp]: "c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1, s1) \<Rightarrow>\<^bsup>x\<^esup>  (s2, None) \<Longrightarrow> c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c2, s2) \<Rightarrow>\<^bsup>y\<^esup>  (s3, v)
  \<Longrightarrow>  c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;; c2, s1) \<Rightarrow>\<^bsup>x + y\<^esup>  (s3, v)"
  by (cases v) auto

lemma last_call_continuate_var: "(continuate d r) \<turnstile>\<^sub>L\<^sub>C ((continuate c r),s) \<Rightarrow>\<^bsup>z\<^esup> (t,r') \<Longrightarrow> the r' = r \<or> r' = None"
  by (metis call_vars_set continuate_call_vars elem_set insert_iff last_call_vars option.collapse
      option.simps(14) sup.idem sup_bot.right_neutral sup_bot_left)

lemma lcv_sound: "c' \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup> z \<^esup> (t,v) \<Longrightarrow> c' \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t"
  by (induction c' c s z t v rule: rlast_call_val_induct) blast+

lemma lcv_complete: "c' \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t \<Longrightarrow> \<exists>v. c' \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup> z \<^esup> (t,v)"
  apply (induction c' c s z t rule: rbig_step_t_induct)
  apply blast
       apply blast
      apply (metis not_Some_eq rlcvSeq1 rlcvSeq2)
  by blast+

lemma lcv_no_call: "c' \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t \<Longrightarrow> call_count c = 0 \<Longrightarrow> call_count c' = 0 \<Longrightarrow> c' \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup> z \<^esup> (t,None)"
  by (induction c' c s z t  rule: rbig_step_t_induct) auto+


lemma lcv_deterministic: "c' \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup> z \<^esup> (t,v) \<Longrightarrow> c' \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup> z' \<^esup> (t,v') \<Longrightarrow> z = z' \<and> v = v'"
proof (induction c' c s z t v arbitrary: v' z' rule: rlast_call_val_induct)
  case (rlcvSkip c s)
  then show ?case 
    by blast
next
  case (rlcvAssign c x a s)
  then show ?case 
    by blast
next
  case (rlcvSeq1 c c1 s1 x s2 v c2 y s3 z)
  then show ?case proof (cases v')
    case None
     then show ?thesis proof(cases v)
       case None
       then show ?thesis using \<open>v = None\<close> \<open>v' = None\<close> 
         by (metis lcv_sound rdeterministic rlast_call_val.rlcvSeq1 rlcvSeq1.hyps(1,2,3) rlcvSeq1.prems)
     next
       case (Some a)  
       have \<open>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;; c2, s1) \<Rightarrow>\<^bsup>z\<^esup>  (s3, None)\<close>
         using None rlcvSeq1.prems 
         by (metis lcv_sound rbig_step_t.rSeq  rlcvSeq1.hyps(1,2,3))
       hence \<open>v = None\<close> using rlcvSeq_tE1 
         by (metis lcv_sound rdeterministic rlcvSeq1.IH(1) rlcvSeq1.hyps(1))
       then show ?thesis 
         by (simp add: Some)
     qed
  next
    case (Some a)
    then show ?thesis 
  qed
   
next
  case (rlcvSeq2 c c1 s1 x s2 v c2 y s3 v' z)
  then show ?case sorry
next
  case (rlcvIfTrue s b c c1 x t v y c2)
  then show ?case sorry
next
  case (rlcvIfFalse s b c c2 x t v y c1)
  then show ?case sorry
next
  case (rlcvCall C s z t c r)
  then show ?case sorry
next
  case (rRec c s z t v)
  then show ?case sorry
qed


lemma lcv_seq_None[simp]: assumes " c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;; c2, s1) \<Rightarrow>\<^bsup>z\<^esup>  (s3, None) "
  shows " \<exists>x. c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1, s1) \<Rightarrow>\<^bsup>x\<^esup>  (s2, None)"
proof-
  have "c \<turnstile>\<^sub>R (c1;; c2, s1) \<Rightarrow>\<^bsup>z\<^esup>  s3"
    using assms lcv_sound by auto
  then obtain s2 x y where \<open>c \<turnstile>\<^sub>R (c1, s1) \<Rightarrow>\<^bsup>x\<^esup>  s2\<close> \<open>c \<turnstile>\<^sub>R (c2, s2) \<Rightarrow>\<^bsup>y\<^esup>  s3\<close> \<open> z=x+y\<close>
    by blast
  then obtain v1 v2 where \<open>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1, s1) \<Rightarrow>\<^bsup>x\<^esup>  (s2,v1)\<close> \<open>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c2, s2) \<Rightarrow>\<^bsup>y\<^esup>  (s3,v2)\<close>
    using lcv_complete by presburger
  then show ?thesis proof(cases v2)
    case None
    have \<open>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1;; c2, s1) \<Rightarrow>\<^bsup>z\<^esup>  (s3, v1)\<close>
      using None \<open>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c1, s1) \<Rightarrow>\<^bsup>x\<^esup> (s2, v1)\<close> \<open>c \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c2, s2) \<Rightarrow>\<^bsup>y\<^esup> (s3, v2)\<close> \<open>z = x + y\<close>
      by blast
    then show ?thesis sorry
  next
    case (Some a)
    then show ?thesis sorry
  qed


lemma continuate_sound_no_calls: 
  "\<lbrakk> c' \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t; set (vars c) \<subseteq> S; set (vars c') \<subseteq> S; r \<notin> S; c' \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup> z \<^esup> (t,None)\<rbrakk>
  \<Longrightarrow>  \<exists>z'. continuate c' r \<turnstile>\<^sub>R (continuate c r, s) \<Rightarrow>\<^bsup> z'\<^esup> t(r:= s r)"
proof (induction c' c s z t arbitrary: r rule: rbig_step_t_induct)
  case (rSkip c s)
  then show ?case by auto
next
  case (rAssign c x a s)
  then show ?case 
    by (metis continuate.simps(2) fun_upd_triv fun_upd_twist in_mono insert_iff lcv_sound list.simps(15)
        rlcvAssign vars_rcom.simps(1))
next
  case (rSeq c c1 s1 x s2 c2 y s3 z)
  then show ?case apply auto sorry
next
  case (rIfTrue s b c c1 x t y c2)
  then show ?case sorry
next
  case (rIfFalse s b c c2 x t y c1)
  then show ?case sorry
next
  case (rCall C s z t c r)
  then show ?case sorry
next
  case (rRec c s z t)
  then show ?case sorry
qed

lemma continuate_sound: 
  "\<lbrakk> c' \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t; set (vars c) \<subseteq> S; set (vars c') \<subseteq> S; r \<notin> S; c' \<turnstile>\<^sub>L\<^sub>C\<^sub>V (c,s) \<Rightarrow>\<^bsup> z \<^esup> (t,vo)\<rbrakk>
  \<Longrightarrow>  \<exists>z'. continuate c' r \<turnstile>\<^sub>R (continuate c r, s) \<Rightarrow>\<^bsup> z'\<^esup> t(r:= (if vo = Some v then v else s r))"
proof (induction c' c s z t arbitrary: vo v r rule: rbig_step_t_induct)
  case (rSkip c s)
  then show ?case by fastforce
next
  case (rAssign c x a s)
  then show ?case proof(cases vo)
    case None
    then show ?thesis 
      by (smt (verit, best) continuate.simps(2) fun_upd_triv not_None_eq rAssign.prems(1,3) rAssign_tE
          rbig_step_t.rAssign rnoninterference)
    next
    case (Some a)
    then show ?thesis 
      using rAssign.prems(4) by blast
  qed
next
  case (rSeq c c1 s1 x s2 c2 y s3 z)
  then show ?case sorry
next
  case (rIfTrue s b c c1 x t y c2)
  then show ?case by force
next
  case (rIfFalse s b c c2 x t y c1)
  then show ?case by force
next
  case (rCall C s z t c r')
  have \<open>c \<turnstile>\<^sub>R (continuate (rCall C r') r, s) \<Rightarrow>\<^bsup>z + 2\<^esup> ((s(r:=t r))(r':= t r))\<close>
    using continuate_call rCall.hyps rCall.prems(1,2,3) by blast
  hence \<open>c \<turnstile>\<^sub>R (continuate (rCall C r') r, s(r:= 0)) \<Rightarrow>\<^bsup>z + 2\<^esup> (((s(r:=t r))(r':= t r)))(r:=0)\<close>
    using rnoninterference try
  then show ?case 
next
  case (rRec c s z t)
  then show ?case sorry
qed 


fun tree_cf :: "rcom \<Rightarrow> rcom" where 
"tree_cf (rSKIP) = rSKIP" |
"tree_cf (x ::= a)  = (x ::= a)" |
"tree_cf ((IF b\<noteq>0 THEN c1 ELSE c2) ;; c3) = (IF b\<noteq>0 THEN tree_cf (c1 ;; c3) ELSE tree_cf (c2 ;; c3))" |
"tree_cf (c1 ;; c2) = tree_cf c1 ;; tree_cf c2" |
"tree_cf (IF b\<noteq>0 THEN c1 ELSE c2)  = (IF b\<noteq>0 THEN tree_cf c1 ELSE tree_cf c2)" |
"tree_cf c = c"

lemma tree_sound: "d \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t  
  \<Longrightarrow> d \<turnstile>\<^sub>R (tree_cf c,s) \<Rightarrow>\<^bsup>z \<^esup> t"
  by (induction c arbitrary: d s z t rule: tree_cf.induct) fastforce+

lemma tree_complete: "d \<turnstile>\<^sub>R (tree_cf c,s) \<Rightarrow>\<^bsup>z \<^esup> t  
  \<Longrightarrow> d \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t"
  by (induction c arbitrary: d s z t rule: tree_cf.induct) fastforce+

lemma tree_comp: "d \<turnstile>\<^sub>R (tree_cf c,s) \<Rightarrow>\<^bsup>z \<^esup> t  
  \<longleftrightarrow> d \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t" using tree_sound tree_complete by metis

section \<open>Last call semantics\<close>
inductive
  rec_last_call :: "(rcom \<times> state) \<Rightarrow> nat \<Rightarrow> (state \<times> vname option) \<Rightarrow> bool" ("\<turnstile>\<^sub>L\<^sub>C_ \<Rightarrow>\<^bsup>_\<^esup>  _" 55)
where
Skip: "\<turnstile>\<^sub>L\<^sub>C (rSKIP,s) \<Rightarrow>\<^bsup>Suc (0::nat) \<^esup> (s,False)" |
Assign: "\<turnstile>\<^sub>L\<^sub>C(x ::= a,s) \<Rightarrow>\<^bsup>Suc (Suc 0) \<^esup> (s(x := aval a s),False)" |
Seq: "\<lbrakk>\<turnstile>\<^sub>L\<^sub>C (c1,s1) \<Rightarrow>\<^bsup>x \<^esup> (s2, False); \<turnstile>\<^sub>R (c2,s2) \<Rightarrow>\<^bsup>y \<^esup> (s3,CONT) ; z=x+y \<rbrakk> \<Longrightarrow> \<turnstile>\<^sub>R (c1;;c2, s1) \<Rightarrow>\<^bsup>z \<^esup> (s3,CONT)" |
IfTrue: "\<lbrakk> s b \<noteq> 0; \<turnstile>\<^sub>L\<^sub>C (c1,s) \<Rightarrow>\<^bsup>x \<^esup> (t,CONT); y=x+1 \<rbrakk> \<Longrightarrow> \<turnstile>\<^sub>L\<^sub>C (IF b \<noteq>0 THEN c1 ELSE c2, s) \<Rightarrow>\<^bsup>y \<^esup> (t,CONT)" |
IfFalse: "\<lbrakk> s b = 0; \<turnstile>\<^sub>L\<^sub>C (c2,s) \<Rightarrow>\<^bsup>x \<^esup> (t,CONT); y=x+1  \<rbrakk> \<Longrightarrow> \<turnstile>\<^sub>L\<^sub>C (IF b \<noteq>0 THEN c1 ELSE c2, s) \<Rightarrow>\<^bsup>y \<^esup> (t,CONT)" |
Call: "(C,s) \<Rightarrow>\<^bsup>z \<^esup> t \<Longrightarrow> \<turnstile>\<^sub>L\<^sub>C (CALL C RETURN r,s) \<Rightarrow>\<^bsup>z \<^esup> (s(r:=t r),False)" |
Rec: "\<turnstile>\<^sub>L\<^sub>C (RECURSE,s) \<Rightarrow>\<^bsup>5 \<^esup> (s,True)"

code_pred rec_step .

declare rec_step.intros[intro]

lemmas rec_step_induct = rec_step.induct[split_format(complete)]

inductive_cases recSkip_tE[elim!]: "\<turnstile>\<^sub>R (rSKIP,s) \<Rightarrow>\<^bsup>x \<^esup> (t,b)"
inductive_cases recAssign_tE[elim!]: "\<turnstile>\<^sub>R (x ::= a,s) \<Rightarrow>\<^bsup>p \<^esup> (t,b)"
inductive_cases recSeq_tE[elim!]: "\<turnstile>\<^sub>R (c1;;c2,s1) \<Rightarrow>\<^bsup>p \<^esup> (s3,b)"
inductive_cases recIf_tE[elim!]: "\<turnstile>\<^sub>R (IF b \<noteq>0 THEN c1 ELSE c2,s) \<Rightarrow>\<^bsup>x \<^esup> (t,CONT)"
inductive_cases recCall_tE[elim!]: "\<turnstile>\<^sub>R (CALL C RETURN v,s) \<Rightarrow>\<^bsup>z \<^esup> (t,b)"

inductive_cases recRec_tE[elim]: "\<turnstile>\<^sub>R (RECURSE,s) \<Rightarrow>\<^bsup>x \<^esup> (t,b)"

text \<open>Closure of tails\<close>
inductive
 rec_steps :: "rcom \<Rightarrow> rcom \<times> state \<Rightarrow> nat \<Rightarrow> state \<Rightarrow> bool" ("_ \<turnstile>\<^sub>R''_ \<Rightarrow>\<^bsup>_\<^esup>  _" 55) for d
where
rFalse: "\<turnstile>\<^sub>R(c,s) \<Rightarrow>\<^bsup>z \<^esup> (t,False) \<Longrightarrow> d \<turnstile>\<^sub>R'(c,s)\<Rightarrow>\<^bsup>z \<^esup> t" |
rTrue: "\<turnstile>\<^sub>R(c,s1) \<Rightarrow>\<^bsup>x \<^esup> (s2,True) \<Longrightarrow> d \<turnstile>\<^sub>R'(d,s2)\<Rightarrow>\<^bsup>y \<^esup> s3 \<Longrightarrow> d \<turnstile>\<^sub>R'(c,s1)\<Rightarrow>\<^bsup>x+y \<^esup> s3"

code_pred rec_steps .

declare rec_steps.intros[intro]
declare rec_steps.cases[elim]

lemmas rec_steps_induct = rec_steps.induct[split_format(complete)]

lemma no_recs_no_step: "\<turnstile>\<^sub>R(c,s) \<Rightarrow>\<^bsup>z \<^esup> (t,b) \<Longrightarrow> \<not>recs c \<Longrightarrow> \<not>b"
  by (induction c s z t b rule: rec_step_induct) auto

lemma no_recs_sem: "\<turnstile>\<^sub>R(c,s) \<Rightarrow>\<^bsup>z \<^esup> (t,b) \<Longrightarrow> \<not>recs c \<Longrightarrow> d \<turnstile>\<^sub>R (c,s)\<Rightarrow>\<^bsup>z \<^esup> t"
  by (induction c s z t b rule: rec_step_induct) auto

lemma small_sound: "d \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t \<Longrightarrow> invar c \<Longrightarrow> invar d \<Longrightarrow> d \<turnstile>\<^sub>R' (c,s) \<Rightarrow>\<^bsup>z \<^esup> t"
proof (induction d c s z t rule: rbig_step_t_induct)
  case (rSeq c c1 s1 x s2 c2 y s3 z)
  hence "c \<turnstile>\<^sub>R'(c1, s1) \<Rightarrow>\<^bsup>x\<^esup>  s2" "c \<turnstile>\<^sub>R'(c2, s2) \<Rightarrow>\<^bsup>y\<^esup>  s3" by auto
  from this rSeq show ?case apply (cases) apply auto
    subgoal
      by (smt (verit) ab_semigroup_add_class.add_ac(1) rec_step.Seq rec_steps.simps)
    subgoal
      by (metis no_recs_no_step)
    done
next
  case (rIfTrue s b c c1 x t y c2)
  hence "c \<turnstile>\<^sub>R'(c1, s) \<Rightarrow>\<^bsup>x\<^esup>  t" by auto
  from this rIfTrue show ?case apply (cases) apply auto apply force
    by (metis Suc_eq_plus1 local.rIfTrue(1) plus_nat.simps(2) rec_step.IfTrue rec_steps.intros(2))
next
  case (rIfFalse s b c c2 x t y c1)
  hence "c \<turnstile>\<^sub>R'(c2, s) \<Rightarrow>\<^bsup>x\<^esup>  t" by auto
  from this rIfFalse show ?case apply (cases) apply auto apply force
    by (metis Suc_eq_plus1 add_Suc rTrue rec_step.IfFalse)
next
  case (rRec c s z t)
  hence " c \<turnstile>\<^sub>R'(c, s) \<Rightarrow>\<^bsup>z\<^esup>  t" by simp
  moreover have "\<turnstile>\<^sub>R(RECURSE,s) \<Rightarrow>\<^bsup>5 \<^esup> (s,True)"
    by (metis Rec)
  ultimately show ?case by auto
qed auto

lemma small_complete: "d \<turnstile>\<^sub>R' (c,s) \<Rightarrow>\<^bsup>z \<^esup> t \<Longrightarrow> invar c \<Longrightarrow> invar d \<Longrightarrow> d \<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>z \<^esup> t"
proof (induction c s z t rule: rec_steps_induct)
  case (rFalse c s z t)
  then show ?case
    by (induction c s z t False rule: rec_step_induct) auto
next
  case (rTrue c s1 x s2 y s3)
  then show ?case
  proof (induction c s1 x s2 True arbitrary:  rule: rec_step_induct)
    case (Seq c1 s1 x s2 c2 y s3 z)
    then show ?case using no_recs_sem apply auto
      using ab_semigroup_add_class.add_ac(1) by blast
  qed auto
qed




unbundle no rcom_syntax and com'_syntax

lemma while'_unrolling:
  assumes "s b \<noteq> 0"
  shows "(c;;WHILE b\<noteq>0 DO c,s)\<Rightarrow>'\<^bsup>z\<^esup> t = (WHILE b\<noteq>0 DO c,s)\<Rightarrow>'\<^bsup>1+z\<^esup> t"
  using assms by auto

lemma rnoninterference:
  "\<lbrakk>c'\<turnstile>\<^sub>R (c,s) \<Rightarrow>\<^bsup>x \<^esup> t; set (vars c) \<subseteq> S; set (vars c') \<subseteq> S; v \<notin> S \<rbrakk> \<Longrightarrow> c'\<turnstile>\<^sub>R (c,s(v:=y)) \<Rightarrow>\<^bsup>x \<^esup> t(v:=y)"
proof (induction c' c s x t rule: rbig_step_t_induct)
  case (rAssign c x a s)
  hence " s(v := y, x := aval a (s(v := y))) = s(x := aval a s, v := y)" by force
  thus ?case using rbig_step_t.rAssign[of c x a "s(v:=y)"] by argo
next
  case (rCall C s z t c r)
  hence Call: "(C, s(v := y)) \<Rightarrow>\<^bsup>z \<^esup> t(v := y)" using fresh_var_changed by fastforce
  from rCall have state: " s(v := y, r := (t(v := y)) r) = s(r := t r, v := y)" by auto
  show ?case using rbig_step_t.rCall[OF Call, of c r] state by argo
qed (auto | force)+


lemma noninterference':
  "\<lbrakk>\<turnstile>\<^sub>R(c,s) \<Rightarrow>\<^bsup>x \<^esup> (t,b); set (vars c) \<subseteq> S; set (vars c') \<subseteq> S; v \<notin> S \<rbrakk> \<Longrightarrow> \<turnstile>\<^sub>R(c,s(v:=y)) \<Rightarrow>\<^bsup>x \<^esup> (t(v:=y),b)"
proof (induction c s x t b rule: rec_step_induct)
  case (Assign x a s)
  hence "s(v := y, x := aval a (s(v := y))) = s(x := aval a s, v := y)" by force
  then show ?case using rec_step.Assign[of x a "s(v:=y)"] by argo
next
  case (Call C s z t r)
   hence Call: "(C, s(v := y)) \<Rightarrow>\<^bsup>z \<^esup> t(v := y)" using fresh_var_changed by fastforce
   from rCall have state: " s(v := y, r := (t(v := y)) r) = s(r := t r, v := y)" by auto
   show ?case using rbig_step_t.rCall[OF Call, of c r] state
     by (metis local.Call rec_step.Call)
qed auto

lemma rnoninterference':
  "\<lbrakk>c'\<turnstile>\<^sub>R'(c,s) \<Rightarrow>\<^bsup>x \<^esup> t; set (vars c) \<subseteq> S; set (vars c') \<subseteq> S; v \<notin> S \<rbrakk> \<Longrightarrow> c'\<turnstile>\<^sub>R'(c,s(v:=y)) \<Rightarrow>\<^bsup>x \<^esup> t(v:=y)"
proof (induction c s x t rule: rec_steps_induct)
  case (rFalse c s z t)
  then show ?case
    using noninterference' by blast
next
  case (rTrue c s1 x s2 y s3)
  then show ?case
    by (meson noninterference' rec_steps.rTrue)
qed

lemma continuate_call: 
  "\<lbrakk> (C,s) \<Rightarrow>\<^bsup>z \<^esup> t; set (vars c) \<subseteq> S; set (vars (rCall C r')) \<subseteq> S; r \<notin> S\<rbrakk>
  \<Longrightarrow>  c \<turnstile>\<^sub>R (continuate (rCall C r') r, s) \<Rightarrow>\<^bsup>z + 2\<^esup> ((s(r:=t r))(r':= t r))"
  apply auto
  by (metis add.right_neutral add_Suc_right atomVal.simps(1) aval.simps(1) fun_upd_same rAssign rCall rSeq)



lemma continuate_terminates:
  "\<lbrakk> c' \<turnstile>\<^sub>R(c,s) \<Rightarrow>\<^bsup>x \<^esup> t; set (vars c) \<subseteq> S; set (vars c') \<subseteq> S; r \<notin> S \<rbrakk> 
  \<Longrightarrow> \<exists>z t'. c' \<turnstile>\<^sub>R (continuate c r, s) \<Rightarrow>\<^bsup>z\<^esup> t'"
proof (induction c' c s x t arbitrary: S r  rule: rbig_step_t_induct)
  case (rSeq c c1 s1 x s2 c2 y s3 z)
  then show ?case 
next
  case (rIfTrue s b c c1 x t y c2)
  then show ?case sorry
next
  case (rIfFalse s b c c2 x t y c1)
  then show ?case sorry
next
  case (rCall C s z t c r)
  then show ?case sorry
next
  case (rRec c s z t)
  then show ?case sorry
qed auto

lemma continuate_sound:
  "\<lbrakk> c' \<turnstile>\<^sub>R(c,s) \<Rightarrow>\<^bsup>x \<^esup> t; set (vars c) \<subseteq> S; set (vars c') \<subseteq> S; r \<notin> S \<rbrakk> 
  \<Longrightarrow> \<exists>z. c' \<turnstile>\<^sub>R (continuate c r, s) \<Rightarrow>\<^bsup>z\<^esup> t' \<Longrightarrow> t(r:= t' r)  = t'"
proof (induction c' c s x t arbitrary: S r t' rule: rbig_step_t_induct)
  case (rSeq c c1 s1 x s2 c2 y s3 z)
  have \<open>set (vars c1) \<subseteq> S\<close> \<open>set (vars c1) \<subseteq> S\<close> using \<open>set (vars (rSeq c1 c2)) \<subseteq> S\<close>
    by simp+
  obtain t2' where \<open> c \<turnstile>\<^sub>R (continuate c1 r, s1) \<Rightarrow>\<^bsup>x\<^esup>  t2' \<Longrightarrow> s2(r := t2' r) = t2'\<close>
    by auto
  obtain z' where \<open>c \<turnstile>\<^sub>R (continuate (rSeq c1 c2) r, s1) \<Rightarrow>\<^bsup>z'\<^esup>  t'\<close> 
    using rSeq.prems(3) 
    using rSeq.prems(4) by blast
  hence  \<open>c \<turnstile>\<^sub>R ((rSeq (continuate c1 r) (continuate c2 r)), s1) \<Rightarrow>\<^bsup>z'\<^esup>  t'\<close> by simp
  then obtain t'' z1' z2' where
    \<open>c \<turnstile>\<^sub>R (continuate c1 r, s1) \<Rightarrow>\<^bsup>z1'\<^esup>  t''\<close> \<open>c \<turnstile>\<^sub>R (continuate c2 r, t'') \<Rightarrow>\<^bsup>z2'\<^esup>  t'\<close> \<open>z' = z1' +z2'\<close>
    by blast
  hence \<open>s2(r := t'' r) = t''\<close>
    using \<open>set (vars c1) \<subseteq> S\<close> rSeq.IH(1) rSeq.prems(2) 
    using rSeq.prems(3) by blast
  hence \<open>\<close>


  then show ?case 
next
  case (rCall C s z t c r)
  then show ?case sorry
next
  case (rRec c s z t)
  then show ?case sorry
qed auto



section \<open>Translation between tail-call program and while\<close>

fun translate1 :: "vname \<Rightarrow> tcom \<Rightarrow> com'" where
  "translate1 CONT tTAIL = (CONT ::= A (N 1))" |
  "translate1 CONT (tSeq c1 c2) = (translate1 CONT c1);; translate1 CONT c2" |
  "translate1 CONT (tIf b c1 c2) = (IF b\<noteq>0 THEN translate1 CONT c1 ELSE translate1 CONT c2)" |
  "translate1 CONT (tSKIP) = SKIP'" |
  "translate1 CONT (tAssign v a) = (v ::= a)" |
  "translate1 CONT (tCall c r) = Call' c r"

definition translate :: "vname \<Rightarrow> tcom \<Rightarrow> com'" where
  "translate CONT c = WHILE CONT\<noteq>0 DO (CONT::=A (N 0);;translate1 CONT c)"

lemma set_vars_translate1_subs:
  "set (vars (translate1 CONT c)) \<subseteq> insert CONT (set (vars c))"
  by (induction CONT c rule: translate1.induct) auto

lemma subs_set_vars_translate1:
  "set (vars c) \<subseteq> set (vars (translate1 CONT c))"
  by (induction CONT c rule: translate1.induct) auto

lemma set_vars_translate:
  "set (vars (translate CONT c)) = insert CONT (set (vars c))"
  unfolding translate_def
  using set_vars_translate1_subs subs_set_vars_translate1
  by fastforce

lemma no_tail_cont1: "\<lbrakk>(translate1 CONT c,s)\<Rightarrow>'\<^bsup>z\<^esup> t; \<not>tails c; CONT \<notin> set (vars c)\<rbrakk> \<Longrightarrow> t CONT = s CONT"
  by (induction c arbitrary: s t z) (auto, metis)

lemma no_tail_complete1: "\<lbrakk> (translate1 CONT c,s)\<Rightarrow>'\<^bsup>z\<^esup>t; \<not>tails c \<rbrakk> \<Longrightarrow> d \<turnstile> (c,s)\<Rightarrow>\<^bsup>z\<^esup> t"
proof (induction "translate1 CONT c" s z t arbitrary: c rule: big_step_t'_induct)
  case (Skip' s)
  then show ?case by (cases c) auto
next
  case (Assign' x a s)
  then show ?case by (cases c) (auto simp del: fun_upd_apply)
next
  case (Seq' c1 s1 x s2 c2 y s3 z)
  then show ?case by (cases c) auto
next
  case (IfTrue' s b c1 x t y c2)
  then show ?case apply (cases c) using tIfTrue by auto
next
  case (IfFalse' s b c2 x t y c1)
  then show ?case apply (cases c) apply auto
    using Suc_eq_plus1 by blast
next
  case (WhileFalse' s b c)
  then show ?case by (cases c) auto
next
  case (WhileTrue' s1 b c x s2 y s3 z)
  then show ?case by (cases c) auto
next
  case (Call' c s z t r)
  then show ?case by (cases c) auto
qed

lemma no_tail_complete:
  assumes sem: "(translate1 CONT c;;translate CONT c',s)\<Rightarrow>'\<^bsup>2+z\<^esup>t"
      and no_tail: "\<not>tails c"
      and fresh: "CONT \<notin> set (vars c)"
      and start: "s CONT = 0"
    shows "d \<turnstile> (c,s)\<Rightarrow>\<^bsup>z\<^esup> t"
proof -
  from sem obtain t' x' y' where *:"(translate1 CONT c,s)\<Rightarrow>'\<^bsup>x'\<^esup>t'" "(translate CONT c',t')\<Rightarrow>'\<^bsup>y'\<^esup>t" "2 + z = x' + y'" by auto
  with fresh start have "t' CONT = 0"
    by (metis no_tail no_tail_cont1)
  with * have "t' = t" "y' = 2" by (auto simp: translate_def)
  with * no_tail no_tail_complete1 show ?thesis by auto
qed

lemma translate_sound_gen:
  "\<lbrakk> c' \<turnstile> (c,s) \<Rightarrow>\<^bsup>z\<^esup> t; invar c; invar c'; s CONT = 0; CONT \<notin> S; set (vars c) \<subseteq> S; set (vars c') \<subseteq> S\<rbrakk>
     \<Longrightarrow> (translate1 CONT c;;translate CONT c',s) \<Rightarrow>'\<^bsup>Suc(Suc 0)+z\<^esup> t"
proof (induction c' c s z t rule: tbig_step_t_induct)
  case (tAssign c x a s)
  then show ?case by (auto simp: translate_def simp del: fun_upd_apply) fastforce
next
  case (tSeq c c1 s1 x s2 c2 y s3 z)
  hence 1: "(translate1 CONT c1;; translate CONT c, s1) \<Rightarrow>'\<^bsup> Suc (Suc 0) + x\<^esup>  s2" by auto

  from 1 obtain s' x' y' where *:
    "(translate1 CONT c1, s1)\<Rightarrow>'\<^bsup> x'\<^esup>  s'"
    "(translate CONT c, s')\<Rightarrow>'\<^bsup> y'\<^esup> s2"
    "x' + y' = Suc (Suc 0) + x" by auto
  from * have s': "s' CONT = 0" using no_tail_cont1 using tSeq by auto (metis in_mono)
  with * have 11: "(translate1 CONT c1, s1) \<Rightarrow>'\<^bsup> x\<^esup>  s2"
    using translate_def by auto

  from s' * have "s2 CONT = 0"
    using tSeq by auto (metis "11" determ)
  with tSeq have 2: "(translate1 CONT c2;; translate CONT c, s2) \<Rightarrow>'\<^bsup> Suc (Suc 0) + y\<^esup>  s3"
    by auto

  from 11 2 have "(translate1 CONT c1 ;; (translate1 CONT c2;; translate CONT c), s1) \<Rightarrow>'\<^bsup> Suc (Suc 0) + z\<^esup>  s3"
    using \<open>z = x + y\<close> by auto

  then show ?case by auto
next
  case (tCall C s z t c r)
  then show ?case by (auto simp: translate_def simp del: fun_upd_apply) fastforce
next
  case (tTail c s z t)
  hence "(translate1 CONT c;; translate CONT c, s) \<Rightarrow>'\<^bsup> 2 + z\<^esup>  t" by auto
  moreover have "(CONT ::= A (N 0),s(CONT:=1)) \<Rightarrow>'\<^bsup> 2\<^esup> s"
  proof - (* wtf why is this not automatic *)
    have "(CONT ::= A (N 0),s(CONT:=1)) \<Rightarrow>'\<^bsup> 2\<^esup> s(CONT := 0)"
      using Assign'[of CONT "A (N 0)" "s(CONT:=1)"] by (auto simp: eval_nat_numeral)
    moreover from \<open>s CONT = 0\<close> have "s(CONT := 0) = s" by auto
    ultimately show ?thesis by simp
  qed
  ultimately have "((CONT ::= A (N 0);;translate1 CONT c);; translate CONT c, s(CONT:=1)) \<Rightarrow>'\<^bsup> 4 + z\<^esup>  t"
    by fastforce
  with while'_unrolling have "(translate CONT c, s(CONT:=1)) \<Rightarrow>'\<^bsup> 5 + z\<^esup>  t"
    unfolding translate_def by auto
  then show ?case by auto
qed (auto simp: translate_def)

lemma translate_sound:
  assumes c_sem: "c \<turnstile> (c,s) \<Rightarrow>\<^bsup>z\<^esup> t"
      and invar: "invar c"
      and start: "s CONT \<noteq> 0"
      and fresh: "CONT \<notin> set (vars c)"
    shows "(translate CONT c,s) \<Rightarrow>'\<^bsup>5+z\<^esup> t(CONT:=0)"
proof -
  from c_sem fresh have c_sem2: "c \<turnstile> (c,s(CONT := 0)) \<Rightarrow>\<^bsup>z\<^esup> t(CONT:= 0)"
    using tnoninterference by blast

  have "(CONT::=A (N 0),s) \<Rightarrow>'\<^bsup>Suc (Suc 0)\<^esup> s(CONT:=0)" using Assign'[of CONT "A (N 0)" s] by simp

  moreover have "(translate1 CONT c;; translate CONT c, s(CONT:=0)) \<Rightarrow>'\<^bsup> 2+z\<^esup> t(CONT := 0)"
    using translate_sound_gen c_sem2 invar fresh by simp

  ultimately have "((CONT::=A (N 0);;translate1 CONT c);; translate CONT c, s) \<Rightarrow>'\<^bsup> 4+z\<^esup> t(CONT := 0)"
    apply (simp add: numeral_eq_Suc)
    by (smt (verit, ccfv_SIG) Seq'_tE add.assoc add_2_eq_Suc big_step_t'.Seq' numeral_2_eq_2)
  then show "(translate CONT c,s) \<Rightarrow>'\<^bsup>5+z\<^esup> t(CONT := 0)" using while'_unrolling start translate_def by auto
qed

lemma translate1_complete:
  "\<lbrakk> (translate1 CONT c,s)\<Rightarrow>'\<^bsup>z\<^esup>t; s CONT = 0; invar c; set (vars c) \<subseteq> S; CONT \<notin> S \<rbrakk>
     \<Longrightarrow> (if t CONT \<noteq> 0 then \<turnstile>(c,s) \<Rightarrow>\<^bsup>3+z\<^esup> (t(CONT := s CONT),True) else \<turnstile>(c,s) \<Rightarrow>\<^bsup>z\<^esup> (t,False))"
proof (induction "translate1 CONT c" s z t arbitrary: c rule: big_step_t'_induct)
  case (Skip' s)
  then show ?case by (cases c) auto
next
  case (Assign' x a s)
  thus ?case apply (cases c) apply (auto split: if_splits)
    by (metis Tail fun_upd_triv)
next
  case (Seq' c1 s1 x s2 c2 y s3 z)
  then show ?case
    apply (cases c)
         apply (auto split: if_splits)
    subgoal
      by (smt (verit, best) Seq'.hyps(2) add.left_commute no_tails_invar no_tails_no_step tail_step.Seq)
    subgoal
      by (metis Seq'.hyps(2) no_tails_invar no_tails_no_step tail_step.Seq)

    done
next
  case (IfTrue' s b c1 x t y c2)
  then show ?case apply (cases c) apply (auto split: if_splits)
    subgoal
      by (smt (verit) IfTrue'.hyps(1) One_nat_def Suc_1 Suc_eq_plus1 numeral.simps(2) numeral_3_eq_3 plus_1_eq_Suc plus_nat.simps(2) tail_step.IfTrue)
    subgoal
      using IfTrue'.hyps by blast

    done
next
  case (IfFalse' s b c2 x t y c1)
  then show ?case apply (cases c) apply (auto split: if_splits)
    subgoal
          by (smt (verit, ccfv_threshold) One_nat_def Suc_1 Suc_eq_plus1 numeral.simps(2) numeral_3_eq_3 plus_1_eq_Suc plus_nat.simps(2) tail_step.IfFalse)
    subgoal using IfFalse'.hyps by blast

    done
next
  case (WhileFalse' s b c)
  then show ?case apply (cases c) apply auto done
next
  case (WhileTrue' s1 b c x s2 y s3 z)
  then show ?case apply (cases c) apply auto done
next
  case (Call' c s z t r)
  then show ?case apply (cases c) apply auto done
qed

lemma loop_min: "(WHILE b\<noteq>0 DO c, s) \<Rightarrow>'\<^bsup> z\<^esup>  t \<Longrightarrow> (c,s) \<Rightarrow>'\<^bsup>x\<^esup> s2 \<Longrightarrow> s b \<noteq> 0 \<Longrightarrow> z \<ge> 3+x"
  apply (induction "WHILE b\<noteq>0 DO c" s z t rule: big_step_t'_induct) apply simp using determ by fastforce

lemma translate_complete:
  "\<lbrakk> (translate CONT c,s)\<Rightarrow>'\<^bsup>5+z\<^esup>t; s CONT \<noteq> 0; invar c; CONT \<notin> set (vars c) \<rbrakk>
    \<Longrightarrow> c \<turnstile>'(c,s) \<Rightarrow>\<^bsup>z\<^esup> t(CONT:= s CONT)"
proof (induction "translate CONT c" s "5+z" t arbitrary: z rule: big_step_t'_induct)
  case (WhileTrue' s1 b c' x s2 y s3 )

  hence c'_def: "c' = CONT::=A (N 0);;translate1 CONT c" and b_def: "b = CONT" by (auto simp: translate_def)

  have 0: "(CONT::=A (N 0),s1) \<Rightarrow>'\<^bsup>Suc (Suc 0)\<^esup>s1(CONT := 0)"
    using Assign'[of CONT "A (N 0)" s1,simplified] by (simp add: numeral_eq_Suc)

  obtain x' where 1:
    "x' + Suc (Suc 0) = x" "(translate1 CONT c,s1(CONT:=0))\<Rightarrow>'\<^bsup> x'\<^esup>s2"
    using WhileTrue'.hyps (2)[unfolded c'_def] by auto

  show ?case proof (cases "s2 CONT = 0")
    case True
    hence "\<turnstile>(c,s1(CONT:=0)) \<Rightarrow>\<^bsup>x'\<^esup> (s2,False)" using translate1_complete 1 WhileTrue' by fastforce

    moreover from \<open>(WHILE b\<noteq>0 DO c', s2) \<Rightarrow>'\<^bsup> y\<^esup>  s3\<close> have "s2 = s3" "y = Suc (Suc 0)" using True b_def by auto
    ultimately have "\<turnstile>(c,s1) \<Rightarrow>\<^bsup>x'\<^esup> (s3(CONT := s1 CONT),False)"
      using WhileTrue' noninterference'
      by (smt (verit, ccfv_threshold) fun_upd_idem_iff fun_upd_upd order_le_less)
    hence "c \<turnstile>'(c, s1) \<Rightarrow>\<^bsup>x'\<^esup>  s3(CONT := s1 CONT)" by auto
    moreover from  \<open>x' + Suc (Suc 0) = x\<close> \<open>1 + x + y = 5+z\<close> \<open>y = Suc (Suc 0)\<close> have "x' = z" by simp
    ultimately show ?thesis by blast
  next
    case False
    with \<open>(WHILE b\<noteq>0 DO c', s2) \<Rightarrow>'\<^bsup> y\<^esup>  s3\<close> obtain s2' z' where "(c',s2) \<Rightarrow>'\<^bsup>z'\<^esup> s2'"
      using b_def by auto
    hence "z' \<ge> 2" unfolding c'_def by auto
    with loop_min have "y \<ge> 5"
      using False WhileTrue'.hyps(4) \<open>(c', s2) \<Rightarrow>'\<^bsup> z'\<^esup> s2'\<close> b_def by fastforce
    then obtain y' where y'_def: "y = 5 + y'"
      using nat_le_iff_add by blast
    from 1 have 2: "\<turnstile>(c,s1(CONT:=0)) \<Rightarrow>\<^bsup>1+x\<^esup> (s2(CONT := 0), True)"
      using translate1_complete[of CONT c "s1(CONT := 0)" x' s2] False WhileTrue' by (auto simp: numeral_eq_Suc)

    from False WhileTrue' y'_def have "c \<turnstile>'(c, s2) \<Rightarrow>\<^bsup>y'\<^esup>  s3(CONT := s2 CONT)" by auto
    hence 3: "c \<turnstile>'(c, s2(CONT := 0)) \<Rightarrow>\<^bsup>y'\<^esup>  s3(CONT := 0)"
      using tnoninterference' WhileTrue' by (metis fun_upd_upd order.refl)

    from \<open>1 + x + y = 5 + z\<close> y'_def have "c \<turnstile>'(c, s1(CONT := 0)) \<Rightarrow>\<^bsup>z\<^esup>  s3(CONT := 0)"
      using tTrue[OF 2 3] by simp

    then show ?thesis using  WhileTrue' tnoninterference'
      by (metis (mono_tags, lifting) dual_order.refl fun_upd_triv fun_upd_upd)
  qed
qed (auto simp: translate_def)


section \<open>Final compilation\<close>
definition compile :: "tcom \<Rightarrow> com'" where
  "compile c = (let CONT = fresh (vars c) ''CONTINUE'' in CONT::=A (N 1);;translate CONT c)"

lemma set_vars_compile:
  "set (vars (compile c)) = insert (fresh (vars c) ''CONTINUE'') (set (vars c))"
  unfolding compile_def Let_def by (simp add: set_vars_translate)

lemma compile_sound:
  assumes c_sem: "c \<turnstile> (c,s) \<Rightarrow>\<^bsup>z\<^esup> t"
      and invar: "invar c"
  obtains t' where "(compile c,s) \<Rightarrow>'\<^bsup>7+z\<^esup> t'" and "t = t' on set (vars c)"
proof -
  let ?CONT="fresh (vars c) ''CONTINUE''"
  have 1: "(?CONT::=A (N 1),s) \<Rightarrow>'\<^bsup>2\<^esup> s(?CONT:=1)"
    using Assign'[of ?CONT "A (N 1)" s] by (auto simp: eval_nat_numeral)
  from c_sem have "c \<turnstile> (c,s(?CONT:=1))\<Rightarrow>\<^bsup>z\<^esup> t(?CONT:=1)"
    using fresh tnoninterference by (meson dual_order.refl)

  hence "(translate ?CONT c, s(?CONT:=1)) \<Rightarrow>'\<^bsup> 5 + z\<^esup> t(?CONT := 0)"
    using translate_sound invar fresh by (fastforce simp: numeral_eq_Suc)

  hence "(compile c,s)\<Rightarrow>'\<^bsup> 7 + z\<^esup> t(?CONT := 0)" unfolding compile_def
    using 1 apply (simp add: numeral_eq_Suc)
    by (smt (verit, best) IMP_Calls.Seq'' add_2_eq_Suc numeral_2_eq_2)

  with that show ?thesis by simp
qed


lemma compile_complete_add:
  assumes sem: "(compile c,s) \<Rightarrow>'\<^bsup>z + 7\<^esup> t"
      and invar: "invar c"
  obtains t' where "c \<turnstile> (c,s)\<Rightarrow>\<^bsup>z\<^esup> t'" and "t = t' on set (vars c)"
proof -
  let ?CONT="fresh (vars c) ''CONTINUE''"
  have 1: "(?CONT::=A (N 1),s) \<Rightarrow>'\<^bsup>2\<^esup> s(?CONT:=1)"
    using Assign'[of ?CONT "A (N 1)" s] by (auto simp: eval_nat_numeral)

  with sem[unfolded compile_def] have "(translate ?CONT c, s(?CONT:=1)) \<Rightarrow>'\<^bsup> 5 + z\<^esup> t"
    unfolding compile_def apply (auto simp: numeral_eq_Suc) using Seq'_tE
    by (smt (verit, best) "1" Assign'_tE One_nat_def add_Suc add_left_imp_eq plus_1_eq_Suc)

  hence "c \<turnstile> (c,s(?CONT:=1)) \<Rightarrow>\<^bsup>z\<^esup> t(?CONT:=1)"
    using translate_complete small_complete fresh invar by (fastforce simp: numeral_eq_Suc)

  hence "c \<turnstile> (c,s) \<Rightarrow>\<^bsup>z\<^esup> t(?CONT:=s ?CONT)"
    using tnoninterference[where S="set (vars c)"] fresh invar apply auto
    by (smt (verit, best) dual_order.refl fresh fun_upd_triv fun_upd_upd)

  with that show ?thesis using fresh by auto
qed

lemma compile_time_7_le:
  assumes "(compile c,s) \<Rightarrow>'\<^bsup>z\<^esup> t"
  shows "7 \<le> z"
  using assms
proof (induction "compile c" s z t arbitrary: c rule: big_step_t'_induct)
case (Seq' c1 s1 x s2 c2 y s3 z)
then show ?case
  apply (auto simp: compile_def Let_def translate_def)
  apply (erule While'_tE)
  apply auto
  done
qed (auto simp: compile_def Let_def translate_def)

lemma compile_complete:
  assumes "(compile c,s) \<Rightarrow>'\<^bsup>z\<^esup> t"
      and "invar c"
  obtains t' where "c \<turnstile> (c,s)\<Rightarrow>\<^bsup>z - 7\<^esup> t'" and "t = t' on set (vars c)"
  using assms compile_complete_add compile_time_7_le
  by (metis add.commute le_add_diff_inverse)

end